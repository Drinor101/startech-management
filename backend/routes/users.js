import express from 'express';
import { supabase } from '../config/supabase.js';
import { authenticateUser, requireAdmin } from '../middleware/auth.js';
import { logUserActivity, logUserActivityAfter, logActivity } from '../middleware/activityLogger.js';

const router = express.Router();

// Merr të gjithë përdoruesit
router.get('/', authenticateUser, async (req, res) => {
  try {
    const { page, limit, role, department } = req.query;
    
    console.log('Users API - Query params:', { page, limit, role, department });
    console.log('Users API - User making request:', req.user);

    let query = supabase
      .from('users')
      .select('*')
      .order('created_at', { ascending: false });

    // Filtra
    if (role) {
      query = query.eq('role', role);
    }
    if (department) {
      query = query.eq('department', department);
    }

    // Paginimi vetëm nëse është specifikuar
    if (page && limit) {
      const offset = (page - 1) * limit;
      query = query.range(offset, offset + limit - 1);
    }

    console.log('Users API - Executing query...');
    const { data, error, count } = await query.select('*', { count: 'exact' });
    
    console.log('Users API - Query result:', { data, error, count });
    console.log('Users API - Data length:', data?.length);

    if (error) {
      console.error('Users API - Supabase error:', error);
      throw error;
    }

    // Kthe pagination vetëm nëse është kërkuar
    if (page && limit) {
      const response = {
        success: true,
        data: data,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: count || 0,
          pages: Math.ceil((count || 0) / limit)
        }
      };
      console.log('Users API - Paginated response:', response);
      res.json(response);
    } else {
      const response = {
        success: true,
        data: data,
        total: count || data?.length || 0
      };
      console.log('Users API - Non-paginated response:', response);
      res.json(response);
    }
  } catch (error) {
    console.error('Gabim në marrjen e përdoruesve:', error);
    res.status(500).json({
      success: false,
      error: 'Gabim në marrjen e përdoruesve'
    });
  }
});

// Merr një përdorues specifik
router.get('/:id', authenticateUser, async (req, res) => {
  try {
    const { id } = req.params;

    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      throw error;
    }

    if (!data) {
      return res.status(404).json({
        success: false,
        error: 'Përdoruesi nuk u gjet'
      });
    }

    res.json({
      success: true,
      data: data
    });
  } catch (error) {
    console.error('Gabim në marrjen e përdoruesit:', error);
    res.status(500).json({
      success: false,
      error: 'Gabim në marrjen e përdoruesit'
    });
  }
});

// Krijon një përdorues të ri (vetëm admin)
router.post('/', authenticateUser, requireAdmin, logUserActivityAfter('CREATE', 'USERS'), async (req, res) => {
  try {
    const { name, email, role, phone, department, password } = req.body;

    // Validimi i të dhënave
    if (!name || !email || !role || !password) {
      return res.status(400).json({
        success: false,
        error: 'Emri, emaili, roli dhe fjalëkalimi janë të detyrueshëm'
      });
    }

    // Kontrollo nëse emaili ekziston
    const { data: existingUser } = await supabase
      .from('users')
      .select('id')
      .eq('email', email)
      .single();

    if (existingUser) {
      return res.status(400).json({
        success: false,
        error: 'Emaili tashmë ekziston'
      });
    }

    const userData = {
      name,
      email,
      role,
      phone: phone || null,
      department: department || null,
      password, // Në prodhim duhet të hash-ohët
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
      // id will be auto-generated by the database
    };

    const { data, error } = await supabase
      .from('users')
      .insert(userData)
      .select()
      .single();

    if (error) {
      console.error('Supabase error:', error);
      throw error;
    }

    // Heq fjalëkalimin nga përgjigjja
    const { password: _, ...userWithoutPassword } = data;

    res.status(201).json({
      success: true,
      data: userWithoutPassword,
      message: 'Përdoruesi u krijua me sukses'
    });
  } catch (error) {
    console.error('Gabim në krijimin e përdoruesit:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Gabim në krijimin e përdoruesit'
    });
  }
});

// Përditëson një përdorues
router.put('/:id', authenticateUser, logUserActivityAfter('UPDATE', 'USERS'), async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email, role, phone, department, password } = req.body;

    // Kontrollo nëse përdoruesi po përditëson vetveten ose ka të drejta admin
    if (req.user.id !== id && req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        error: 'Nuk keni të drejta për të përditësuar këtë përdorues'
      });
    }

    const updates = {
      name,
      email,
      role,
      phone: phone || null,
      department: department || null,
      updated_at: new Date().toISOString()
    };

    // Shto fjalëkalimin vetëm nëse është dhënë
    if (password && password.trim() !== '') {
      // Validimi i fjalëkalimit
      if (password.length < 6) {
        return res.status(400).json({
          success: false,
          error: 'Fjalëkalimi duhet të ketë të paktën 6 karaktere'
        });
      }
      updates.password = password;
    }

    // Heq fushët që nuk duhet të përditësohen
    delete updates.id;
    delete updates.created_at;

    const { data, error } = await supabase
      .from('users')
      .update(updates)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      throw error;
    }

    // Heq fjalëkalimin nga përgjigjja
    const { password: _, ...userWithoutPassword } = data;

    res.json({
      success: true,
      data: userWithoutPassword,
      message: 'Përdoruesi u përditësua me sukses'
    });
  } catch (error) {
    console.error('Gabim në përditësimin e përdoruesit:', error);
    res.status(500).json({
      success: false,
      error: 'Gabim në përditësimin e përdoruesit'
    });
  }
});

// Fshin një përdorues (vetëm admin)
router.delete('/:id', authenticateUser, requireAdmin, logUserActivityAfter('DELETE', 'USERS'), async (req, res) => {
  try {
    const { id } = req.params;

    // Kontrollo nëse përdoruesi po fshihet vetveten
    if (req.user.id === id) {
      return res.status(400).json({
        success: false,
        error: 'Nuk mund të fshini vetveten'
      });
    }

    const { error } = await supabase
      .from('users')
      .delete()
      .eq('id', id);

    if (error) {
      throw error;
    }

    res.json({
      success: true,
      message: 'Përdoruesi u fshi me sukses'
    });
  } catch (error) {
    console.error('Gabim në fshirjen e përdoruesit:', error);
    res.status(500).json({
      success: false,
      error: 'Gabim në fshirjen e përdoruesit'
    });
  }
});

export default router;

